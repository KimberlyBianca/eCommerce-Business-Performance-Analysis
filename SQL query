# annual customer activity growth analysis

## joining tables
## calculate average monthly active users (MAU), new customers, repeat customers, and average order yearly

WITH temp_table AS (
          	SELECT cust.customer_unique_id AS cust_id, orders.order_id,
          	EXTRACT(YEAR FROM orders.order_purchase_timestamp) order_year,
          	EXTRACT(MONTH FROM orders.order_purchase_timestamp) order_month
          	FROM customers_dataset AS cust
          	INNER JOIN orders_dataset AS orders
          	ON cust.customer_id = orders.customer_id
), MAU_table AS (
          	SELECT order_year, ROUND(AVG(active_users), 2) AS avg_mau
          	FROM (SELECT order_year, order_month, COUNT(DISTINCT cust_id) AS active_users
                         	  FROM temp_table
                         	  GROUP BY 1, 2
HAVING COUNT(order_id) > 0) AS monthly_order_count
          	GROUP BY 1
), new_cust_table AS (
          	SELECT first_order_year, COUNT(cust_id) AS new_cust
FROM (
                         	SELECT cust_id, MIN(order_year) first_order_year
                         	FROM temp_table
                         	GROUP BY 1) AS count_table
          	GROUP BY 1
), repeat_cust_table AS (
          	SELECT order_year, COUNT(cust_id) AS repeat_cust
          	FROM (SELECT order_year, cust_id, COUNT(order_id) AS order_count
                         	  FROM temp_table
                         	GROUP BY 1, 2) AS count_table
          	WHERE order_count > 1
          	GROUP BY 1   	
), avg_order_table AS (
          	SELECT order_year, ROUND(AVG(order_count), 2) AS avg_order
          	FROM (SELECT order_year, cust_id, COUNT(order_id) AS order_count
                         	  FROM temp_table
                         	  GROUP BY 1, 2) AS count_table
          	GROUP BY 1   	
)
 
SELECT MAU_table.order_year, avg_mau, new_cust, repeat_cust, avg_order
FROM MAU_table
INNER JOIN new_cust_table
ON MAU_table.order_year = new_cust_table.first_order_year
INNER JOIN repeat_cust_table
ON MAU_table.order_year = repeat_cust_table.order_year
INNER JOIN avg_order_table
ON MAU_table.order_year = avg_order_table.order_year
ORDER BY MAU_table.order_year ASC;



# annual product category quality analysis

## joining tables
## calculating total revenue, number of canceled order, category with the highest revenue, and category with most canceled order yearly

WITH join_table AS (
	SELECT orders.order_status AS status,
	orders.order_purchase_timestamp AS order_date,
	product.product_category_name AS category,
	(items.price + items.freight_value) AS revenue
	FROM orders_dataset AS orders
	LEFT JOIN order_items_dataset AS items
	ON orders.order_id = items.order_id
	LEFT JOIN product_dataset AS product
	ON items.product_id = product.product_id
), revenue_table AS (
	SELECT EXTRACT(YEAR FROM order_date) AS year, SUM(revenue) AS total_revenue
	FROM join_table
	WHERE status = 'delivered'
	AND order_date IS NOT NULL
	GROUP BY 1
), num_canceled_table AS (
	SELECT EXTRACT(YEAR FROM order_purchase_timestamp) AS year,
	COUNT(order_status) AS num_canceled
	FROM orders_dataset
	WHERE order_status = 'canceled'
	GROUP BY 1
), revenue_category_table AS (
	SELECT year, category, revenue_per_category
	FROM (
		SELECT EXTRACT(YEAR FROM order_date) AS year, category,
		SUM(revenue) AS revenue_per_category,
		RANK() OVER (PARTITION BY EXTRACT(YEAR FROM order_date) ORDER BY SUM(revenue) DESC) AS ranking
		FROM join_table
		WHERE status = 'delivered'
		GROUP BY 1, 2) AS top_revenue_per_category
	WHERE ranking = 1
), canceled_category_table AS (
	SELECT year, category, num_canceled_per_category
	FROM (
		SELECT EXTRACT(YEAR FROM order_date) AS year, category,
		COUNT(status) AS num_canceled_per_category,
		RANK() OVER (PARTITION BY EXTRACT(YEAR FROM order_date) ORDER BY COUNT(status) DESC) AS ranking
		FROM join_table
		WHERE status = 'canceled' AND category IS NOT NULL
		GROUP BY 1, 2) AS top_canceled_per_category
	WHERE ranking = 1
)

SELECT revenue_table.year, revenue_table.total_revenue, num_canceled_table.num_canceled,
revenue_category_table.category AS top_revenue_category,
revenue_category_table.revenue_per_category,
canceled_category_table.category AS top_canceled_category,
canceled_category_table.num_canceled_per_category
FROM revenue_table
JOIN num_canceled_table
ON revenue_table.year = num_canceled_table.year
JOIN revenue_category_table
ON revenue_table.year = revenue_category_table.year
JOIN canceled_category_table
ON revenue_table.year = canceled_category_table.year
ORDER BY 1;



# analysis of annual payment type usage

## joining tables
## count value of each payment type in 2016-2018 (yearly and total)

WITH temp_table AS (
	SELECT EXTRACT(YEAR FROM orders.order_purchase_timestamp) AS year, payment.payment_type
	FROM orders_dataset AS orders
	LEFT JOIN order_payments_dataset AS payment
	ON orders.order_id = payment.order_id
)

SELECT payment_type, year_2016, year_2017, year_2018,
SUM(year_2016 + year_2017 + year_2018) AS total
FROM (
	SELECT payment_type,
	COUNT(CASE WHEN year = 2016 THEN year ELSE NULL END) AS year_2016,
	COUNT(CASE WHEN year = 2017 THEN year ELSE NULL END) AS year_2017,
	COUNT(CASE WHEN year = 2018 THEN year ELSE NULL END) AS year_2018
	FROM temp_table
	WHERE payment_type IS NOT NULL
	GROUP BY 1
) AS table1
GROUP BY 1, 2, 3, 4
ORDER BY 5 DESC;
